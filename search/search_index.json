{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Positron?","text":"<p>Positron is a Flatpak application bundled with Firefox and Python to help you build standalone desktop applications on Linux distributions.</p> <p>Simply design your application with HTML, CSS and use your favorite Python and JavaScript libraries to add interactivity.</p>"},{"location":"#but-why","title":"But why?","text":"<p>Because I think that the GUI development in Python is a bit of a mess. There are many libraries and frameworks to choose from, but all of them seem outdated or too tiresome to design with.</p>"},{"location":"#what-can-i-do-with-positron","title":"What can I do with Positron?","text":"<p>With Positron, you are using Quart, which is a fast web microframework, especially designed for asynchronous programming including easy background tasks and has Jinja2 templating engine built-in. In a nutshell, you can get crazy with it.</p>"},{"location":"#how-to-get-started","title":"How to get started?","text":"<p>It only takes seconds to get started with Positron.</p> <p>Get started</p> <p>Note</p> <p>This work is licensed under the MIT License.</p>"},{"location":"cli/","title":"CLI Tool","text":"<p>Positron comes with a command line interface (CLI) tool to help you develop and build your applications. The tool can be installed from the Python Package Index (PyPI) using the following command:</p> <pre><code>pip install positronpy\n</code></pre> <p>Notice that the tool is named <code>positronpy</code> instead of <code>positron</code>. This is because the name <code>positron</code> was already taken on PyPI.</p> <p>After installing it, the tool can be invoked using the <code>positron</code> command. To see the available commands, run the following command:</p> <pre><code>positron --help\n</code></pre> <p>The CLI tool provides the following commands:</p> <ul> <li><code>dev</code>: Starts a development server that automatically reloads the application when changes are made to the source code. The server runs on <code>http://127.0.0.1:8000</code> by default.</li> <li><code>build</code>: Builds and runs the application using the manifest file.</li> </ul> <p>Use these commands as follows:</p> <pre><code>positron &lt;command&gt;\n</code></pre> <p>You can check out the source code on GitHub.</p>"},{"location":"resources/","title":"Resources","text":"<p>This is a list of resources that you may find useful for learning more about the topics covered in this documentation.</p>"},{"location":"resources/#docker","title":"Docker","text":"<ul> <li>Docker Documentation</li> <li>Docker Python Images</li> </ul>"},{"location":"resources/#firefox","title":"Firefox","text":"<ul> <li>userChrome.css</li> <li>Firefox Profilemaker</li> <li>r/FirefoxCSS</li> <li>Contributors guide on Firefox advanced customization with CSS</li> </ul>"},{"location":"resources/#flatpak","title":"Flatpak","text":"<ul> <li>Setting up Flatpak</li> <li>Flatpak's Documentation</li> <li>Freedesktop SDK</li> <li>Flathub</li> </ul>"},{"location":"resources/#htmlcssjs","title":"HTML/CSS/JS","text":"<ul> <li>MDN Web Docs</li> <li>Vue.js</li> <li>Bootstrap</li> <li>Alpine.js</li> <li>Vanilla Router</li> </ul>"},{"location":"resources/#linux","title":"Linux","text":"<ul> <li>Desktop Entries</li> <li>Desktop Entry Specification</li> </ul>"},{"location":"resources/#python","title":"Python","text":"<ul> <li>pip documentation</li> <li>Wheels</li> </ul>"},{"location":"resources/#web-server","title":"Web Server","text":"<ul> <li>Quart Documentation</li> <li>Flask Documentation</li> <li>Hypercorn</li> <li>Jinja</li> </ul>"},{"location":"structure/","title":"Project structure","text":"<p>After you run the Positron installation script, (hopefully) you'll find some files and directories in your project folder.</p> env/ This is a virtual environment that contains all the necessary dependencies for your application. You can activate it by running <code>source env/bin/activate</code> on Unix-like systems or <code>env\\Scripts\\activate</code> on Windows. icons/ This is where you can put your icons in different sizes to be used as the Flatpak application icon. profile/ This one is a Firefox profile, configured to make your application look like a desktop application. You can customize it using CSS as you wish. static/ Quart serves static files from this folder. You can put everything here, even your Python scripts if that makes sense for you. templates/ This is where you can put your HTML templates. Jinja2 is used to render them, so you can use all its features. wheels/ This is where the wheel package is stored after running the build script. It is used to create the Flatpak application for the correct Python version. app.py This is the main Python script that the web server runs. You can put your main logic and routes here. Dockerfile This Dockerfile gathers necessary dependencies with the correct Python version that is supported by the org.freedesktop.Platform runtime on Flatpak. It builds a wheel package and creates an archive that can be used in the build process. manifest.yml This is the manifest file that Flatpak-builder uses to build the application. You can customize it as you wish. org.flatpak.positron.desktop This is the desktop file that Flatpak uses to create the application shortcut. You can customize it as you wish. org.flatpak.positron.sh This is the script that Flatpak uses to run the application. You can customize it as you wish. requirements.txt This is where you can put your Python dependencies. The installation script will install them for you."},{"location":"get-started/introduction/","title":"Introduction","text":"<p>Positron is not a framework or a library. It's just a quick hacky way to build desktop applications using Firefox binaries inside a Flatpak environment, where the content is served by a Python web server.</p> <p></p> <p>So, you design your frontend with HTML and CSS, while your backend logic is written with your favorite Python libraries. No need to say that you can use JavaScript libraries to add interactivity to your application.</p> <p>With our custom Firefox profile, we make sure that the application looks like a desktop application. You can customize it using CSS as you wish.</p> <p></p>"},{"location":"get-started/quick-start/","title":"Quick Start","text":"<p>Because Flatpak is only available on Linux systems, it is only possible to install Positron on Linux. Use the following command to install it on your system:</p> <pre><code>curl -fsSL https://kaangiray26.github.io/positron/install.sh | sh\n</code></pre> <p>View script source</p> <p>If you're done with the installation, you should now see some files and directories inside your project folder. To learn more about them, check the structure page.</p>"},{"location":"get-started/quick-start/#building-your-first-application","title":"Building your first application","text":"<p>After following this guide, you will have a simple application that shows a simple message.</p>"},{"location":"get-started/quick-start/#step-1-installation","title":"Step 1: Installation","text":"<p>We will start by installing Positron. If you haven't installed it yet, go to your project folder and run the following command:</p> <pre><code>curl -fsSL https://kaangiray26.github.io/positron/install.sh | sh\n</code></pre> <p>This will download all the necessary files as a template for your project. Also, it comes with a command-line tool that you can use to quickly start the development server and build your application. To see it, run the following command:</p> <pre><code>env/bin/positron --help\n</code></pre>"},{"location":"get-started/quick-start/#step-2-web-server","title":"Step 2: Web server","text":"<p>First, let's take a look at the <code>app.py</code> file, which contains the routes and the logic of our application. Open the file in your favorite text editor and you'll see the following code:</p> <pre><code>#-*- coding: utf-8 -*-\n\nfrom quart import Quart, render_template\n\napp = Quart(__name__)\n\n@app.route(\"/\")\nasync def hello():\n    return await render_template(\"index.html\")\n</code></pre> <p>If you are not familiar with Quart or Flask, this code may look unfamiliar to you with those decorators and async functions. But don't worry.</p> <p><code>app = Quart(__name__)</code> creates a new Quart application. <code>@app.route(\"/\")</code> is a decorator that tells the application to call the <code>hello</code> function when the user visits the root URL. <code>return await render_template(\"index.html\")</code> tells the application to render the <code>index.html</code> template from the <code>templates</code> directory.</p> <p>Now, let's see that <code>index.html</code> file now. Open the <code>templates/index.html</code> file in your text editor and you'll see the following code:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Positron&lt;/title&gt;\n        &lt;meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, maximum-scale=5\"\n        /&gt;\n        &lt;meta name=\"description\" content=\"Build desktop apps with Python\" /&gt;\n        &lt;link rel=\"stylesheet\" href=\"/static/style.css\" /&gt;\n        &lt;link\n            rel=\"shortcut icon\"\n            type=\"image/svg+xml\"\n            href=\"/static/favicon.svg\"\n        /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;img src=\"/static/favicon.svg\" /&gt;\n            &lt;h1&gt;Positron&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            &lt;section&gt;\n                &lt;h2&gt;Hey there!&lt;/h2&gt;\n                &lt;p&gt;\n                    I'm working just fine. Why are you still waiting? Let's\n                    build something great!\n                &lt;/p&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This is just a simple HTML file. It may seem like a lot of code for a single page, but it's just a starting point. Since Quart uses Jinja2 as the template engine, you can use variables, loops, and conditions in your HTML templates. You can also include other templates, extend them, and more. This allows us to create component-like structures in our templates and reuse them across multiple pages, just like in a modern frontend framework.</p> <p>You can read more about Jinja2 in the official documentation.</p>"},{"location":"get-started/quick-start/#step-3-configuring-the-application","title":"Step 3: Configuring the application","text":"<p>Now that we have our simple application, we can build it. For this, we need to configure some files, especially the <code>manifest.yml</code> file. This file contains the necessary information for building the application. Open up the <code>manifest.yml</code> file in your text editor and you'll see the following code:</p> <pre><code>id: org.flatpak.positron\nruntime: org.freedesktop.Platform\nruntime-version: \"23.08\"\nsdk: org.freedesktop.Sdk\ncommand: org.flatpak.positron.sh\nfinish-args:\n    - --share=ipc\n    - --device=dri\n    - --socket=wayland\n    - --socket=fallback-x11\n    - --filesystem=~/.var/app/org.flatpak.positron/data/\nmodules:\n    - name: python\n      buildsystem: simple\n      build-commands:\n          - mkdir -p /app/wheels\n          - cp wheels/*.whl /app/wheels/\n          - cp app.py /app/\n          - cp -r static /app/\n          - cp -r templates /app/\n          - pip3 install --prefix=/app wheels/*.whl\n      sources:\n          - type: dir\n            path: .\n\n    - name: firefox\n      buildsystem: simple\n      build-commands:\n          # Copy the tarball to the build directory\n          - cp firefox.tar.bz2 /app/\n          - tar -xf /app/firefox.tar.bz2 -C /app/\n          - rm /app/firefox.tar.bz2\n          # Copy the profile\n          - cp -r profile /app/\n      sources:\n          - type: dir\n            path: .\n\n    - name: positron\n      buildsystem: simple\n      build-commands:\n          - install -Dm755 ${FLATPAK_ID}.sh -t /app/bin\n          - install -Dm755 ${FLATPAK_ID}.desktop -t /app/share/applications\n          - install -Dm644 favicon.svg /app/share/icons/hicolor/scalable/apps/org.flatpak.positron.svg\n          - install -Dm644 16.png /app/share/icons/hicolor/16x16/apps/org.flatpak.positron.png\n          - install -Dm644 32.png /app/share/icons/hicolor/32x32/apps/org.flatpak.positron.png\n          - install -Dm644 48.png /app/share/icons/hicolor/48x48/apps/org.flatpak.positron.png\n          - install -Dm644 64.png /app/share/icons/hicolor/64x64/apps/org.flatpak.positron.png\n          - install -Dm644 128.png /app/share/icons/hicolor/128x128/apps/org.flatpak.positron.png\n          - install -Dm644 256.png /app/share/icons/hicolor/256x256/apps/org.flatpak.positron.png\n          - install -Dm644 512.png /app/share/icons/hicolor/512x512/apps/org.flatpak.positron.png\n      sources:\n          - type: file\n            path: org.flatpak.positron.sh\n          - type: file\n            path: org.flatpak.positron.desktop\n          - type: dir\n            path: icons\n</code></pre> <p>If you're not familiar with Flatpak, please take a look at the official documentation to understand how it works. Also, check out the Flatpak manifest documentation to understand the structure of the <code>manifest.yml</code> file.</p> <p>Here, we use the <code>org.freedesktop.Platform</code> runtime. This runtime is provided by the Flatpak project and contains the necessary libraries and dependencies for running applications. If you look at the <code>finish-args</code> section, you'll see some permissions that we set for the application. You may notice that we don't have any permissions for the <code>network</code> in this file. This is because we will be serving our application as a local web server at the address <code>http://127.0.0.1:8000</code> and don't want to expose it to the user's network, so that we mess with other applications or services running on the user's machine.</p> <p>In the <code>modules</code> section, we have three modules: <code>python</code>, <code>firefox</code>, and <code>positron</code>.</p> <p>The <code>python</code> module contains the Python application we built earlier</p> <p>The <code>firefox</code> module contains the binaries for the Firefox browser. We will use Firefox to render the HTML content of our application.</p> <p>The <code>positron</code> module contains the necessary files for running the application, such as the shell script, the desktop file, and the icons.</p> <p>Take a look at other files in the <code>positron</code> directory to understand how they work. A detailed explanation of each file is provided in this documentation.</p>"},{"location":"get-started/quick-start/#step-4-building-the-application","title":"Step 4: Building the application","text":"<p>For building the application, we can just use our <code>positron</code> CLI tool. Run the following command in your terminal:</p> <pre><code>env/bin/positron build\n</code></pre> <p>This command will build the flatpak and run it if the build is successful. You should see the window open up with the application running. Closing the window will cause the application to stop running and exit.</p> <p>Congratulations!  You have successfully built your first Flatpak application using Positron. Check out the other sections of this documentation to learn more about the features of Positron and how to use them.</p>"},{"location":"guides/auto-reload/","title":"AUTO_RELOAD","text":"<p>While using the <code>positron dev</code> command, you may notice that the server does not automatically reload the files when you make changes to the templates. This is because we need to change the value of <code>TEMPLATES_AUTO_RELOAD</code> config option for the Quart. Here is how you can do it in your <code>app.py</code> file:</p> <pre><code>from quart import Quart, render_template\n\napp = Quart(__name__)\napp.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n@app.route(\"/\")\nasync def hello():\n    return await render_template(\"index.html\")\n</code></pre> <p>Now, the server will automatically reload the files when you make changes to the templates.</p>"},{"location":"guides/background-tasks/","title":"Background tasks","text":"<p>During the lifetime of your application, you may need to perform tasks in the background, where the operation takes a long time to complete. Because these tasks can take a long time to complete, they will block the main thread, which will make your application unresponsive. To avoid this, you can perform these tasks in the background.</p> <p>Quart provides the method add_background_task to add a background task to the application. This method takes an async function as an argument and schedules it to run in the background.</p> <p>Here is an example of how to use this method:</p> <pre><code>from quart import Quart, render_template\n\napp = Quart(__name__)\n\nasync def background_task(duration):\n    print(\"Starting background task...\")\n    await asyncio.sleep(duration)\n    print(\"Background task completed!\")\n\n@app.route(\"/\")\nasync def hello():\n    app.add_background_task(\n        background_task(duration=5)\n    )\n    return await render_template(\"index.html\")\n</code></pre>"},{"location":"guides/customizing-the-window/","title":"Customizing the window","text":"<p>Customization of the windows is done by making changes to the Firefox profile. Find the <code>profile</code> folder in your Positron installation directory. Inside the <code>profile/chrome</code> folder you will find a file called <code>userChrome.css</code>. This file is used to customize the appearance of the browser window. You can change the appearance of the browser window by adding CSS rules to this file.</p> <p>To see what you can change in the browser window, you can use the browser's built-in developer tools. First, open the browser and press <code>Ctrl+Shift+I</code> to open the developer tools. Then click on the settings icon in the top right corner.</p> <p></p> <p>In the settings, check the following options under the Advanced settings section:</p> <ul> <li>Enable browser chrome and add-on debugging toolboxes</li> <li>Enable remote debugging</li> </ul> <p></p> <p>After enabling these options, press <code>Ctrl+Alt+Shift+I</code> to open the browser toolbox. This will open the Browser Toolbox window, which allows you to inspect and modify the browser window. From here, fiddle with the elements from the browser window to see what you can change.</p> <p></p> <p>Once you find things you want to change, add the corresponding CSS rules to the <code>userChrome.css</code> file. The changes will take effect the next time you build and run Positron.</p>"},{"location":"guides/network-access/","title":"Network access","text":"<p>By default, Flatpak applications do not have access to the network. We keep this default to ensure that the application does not mess with other services running on localhost with the same port. However, you can of course enable network access for your Flatpak applications. All you need to do is to add the <code>--share=network</code> argument to the <code>manifest.yml</code> file. Here is an example:</p> <pre><code>id: org.flatpak.positron\nruntime: org.freedesktop.Platform\nruntime-version: \"23.08\"\nsdk: org.freedesktop.Sdk\ncommand: org.flatpak.positron.sh\nfinish-args:\n    - --share=ipc\n    - --device=dri\n    - --socket=wayland\n    - --socket=fallback-x11\n    - --filesystem=~/.var/app/org.flatpak.positron/data/\n    - --share=network\n...\n</code></pre> <p>Now, rebuild the Flatpak application for the changes to take effect.</p>"},{"location":"guides/notifications/","title":"Notifications","text":"<p>Since we are using Firefox, we have access to all Web APIs, including the Notification API. With this API, we can create simple notifications that will be displayed on the user's screen. Check out the MDN documentation for more information on how to use this API.</p>"},{"location":"guides/routing/","title":"Routing","text":"<p>Routing is a way to load different components based on the URL. With routing you can create Single Page Applications (SPA) that load elements dynamically. Modern javascript frameworks like Angular, React and Vue have their own routing libraries. Nevertheless, you can also use the following approach to create a simple routing system in vanilla JavaScript.</p> <p>First, create a <code>router-view</code> element in your HTML file. This element will be used as the loading container for different components.</p> <pre><code>&lt;router-view&gt;\n    &lt;!-- Components will be loaded here --&gt;\n&lt;/router-view&gt;\n</code></pre> <p>Next, for all links that you want to use for routing, add a <code>route</code> attribute without any value. This attribute will be used to identify the links that should trigger the routing.</p> <p>Now, create a JavaScript file to handle the routing. In this file, we will add a simple event listener to listen for clicks on the links. When a link is clicked, we will prevent the default behavior and load the component based on the <code>href</code> attribute of the clicked link.</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", async () =&gt; {\n    // Save the routes if not already saved\n    const links = [...document.querySelectorAll(\"a[route]\")];\n\n    // Add a click event listener to all links\n    links.forEach(async (el) =&gt; {\n        el.onclick = () =&gt; route(el, $event);\n    });\n});\n\nasync function route(el) {\n    event.preventDefault();\n\n    // Get the URL from the href attribute\n    const href = el.getAttribute(\"href\");\n\n    // Update the URL\n    console.log(\"Updating to:\", url);\n    window.history.pushState({}, \"\", url);\n\n    // Fetch the content of the URL\n    const html = await fetch(href).then((res) =&gt; res.text());\n\n    // Load the HTML content into the router-view element\n    document.querySelector(\"router-view\").innerHTML = html;\n}\n</code></pre> <p>You can also add a <code>popstate</code> event listener to handle the back and forward buttons of the browser.</p> <p>If you want to use this routing system, you can also check out our Vanilla Router library, which is a simple and lightweight routing library for vanilla JavaScript.</p>"},{"location":"guides/startup-functions/","title":"Startup functions","text":"<p>Sometimes you want to do couple of things before the application starts. For example, you might read some configuration from a file, or you might want to connect to a database. In this case, you can use the before_serving decorator in Quart to run a function before the application starts serving requests. Here is an example:</p> <pre><code>from quart import Quart, render_template\n\napp = Quart(__name__)\n\n@app.before_serving\nasync def startup():\n    print(\"Starting up...\")\n    print(\"beep boop beep\")\n    print(\"Ready to serve requests!\")\n\n@app.route(\"/\")\nasync def hello():\n    return await render_template(\"index.html\")\n</code></pre>"},{"location":"guides/wheels/","title":"Wheels","text":"<p>Positron uses wheels to install dependencies within the Flatpak building process. As you can see, we run a Docker image to create a wheels folder with all the dependencies. This is because the Python inside the runtime is different from the one in the host system. The <code>org.freedesktop.Sdk</code> runtime is based on Python 3.11.9 and to ensure compatibility, we need to use the same version to build the dependencies.</p> <p>If in the future, the runtime is updated to a newer version of Python, we will need to update the Docker image to use the same version. Simply change the <code>FROM python:3.11.9-slim</code> line in the Dockerfile to the new version and rebuild the image. The rest of the process will remain the same.</p> <p>You may ask, why not just use runtime Python to download and install packages during the build process? The answer is simple, yet makes no sense. With the <code>buildsystem: simple</code>, we don't have access to remote resources, so we can't download packages from the internet. This is why we need to use a Docker image to create the wheels folder with all the dependencies.</p>"}]}